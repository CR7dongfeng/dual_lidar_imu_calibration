#include <glog/logging.h>
#include <Eigen/Core>
#include <Eigen/Geometry>
#include <iostream>

using namespace std;

int main(int argc, char** argv) {
    Eigen::Isometry3d T1 = Eigen::Isometry3d::Identity();
    Eigen::Isometry3d T2 = Eigen::Isometry3d::Identity();

//    T1.matrix() << -0.9999543096466326, -0.009498991347031003 , 0.001071346119918333      ,         -0.0045,
//    0.009500378575971174 ,  -0.9999540288831599,   0.00129727685679491,               0.02534,
//    0.001058974047303283 , 0.001307395777482034  ,  0.9999985846441225   ,            0.20771,
//    0          ,           0  ,                   0      ,               1;
//
//    T2.matrix() << -0.9999617158296832, -0.008742042753758155,  0.000378897672903801 , 0.008755675021868112,
//    0.008742511434881349 ,  -0.9999609978841184 ,  0.00125347692771073 ,  0.01336729343450997,
//    0.0003679249461999587 , 0.001256741456624553 ,    0.999999142615705  ,             0.20771,
//    0    ,                 0     ,                0     ,                1;

    T1.matrix() << -0.9999546904131618, -0.009454715998012219,  0.001107007728214299,               -0.0045,
    0.00945622200604782 ,  -0.9999543597423441  , 0.00136319391383624 ,              0.02534,
    0.001094068592790818,  0.001373600258923632  ,  0.9999984581169328 ,              0.20771,
    0          ,           0     ,                0     ,                1;

    T2.matrix() <<    -0.9999543096466326 ,-0.009498991347031003 , 0.001071346119918333 ,              -0.0045,
    0.009500378575971174 ,  -0.9999540288831599 ,  0.00129727685679491   ,            0.02534,
    0.001058974047303283,  0.001307395777482034 ,   0.9999985846441225  ,             0.20771,
    0              ,       0     ,                0       ,              1;

    Eigen::Matrix3d R1 = T1.linear(), R2 = T2.linear();

    Eigen::Matrix3d dR = R1.transpose() * R2;
    Eigen::AngleAxisd angle_axis;
    angle_axis.fromRotationMatrix(dR);

    cout << angle_axis.angle()*180/M_PI << endl;
    cout << angle_axis.axis() << endl;



    return 0;
}